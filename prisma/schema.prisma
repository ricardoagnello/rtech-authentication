// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  TRIAL 
  PAID 
  AWAITING_SINGUP
  EXPIRED
  BLOCKED
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  name         String
  status       UserStatus @default(AWAITING_SINGUP)
  roles        Role[]    @default([USER])
  verificationToken   String?
  verificationTokenExpiresAt DateTime?
  isVerified   Boolean   @default(false)
  githubId     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  refreshTokens RefreshToken[]
  blacklistedTokens BlacklistedToken[]
  passwordResetTokens PasswordResetToken[]
  planId       String?
  plan         Plan?    @relation(fields: [planId], references: [id])
  containerInstances ContainerInstance[]
  databases    Database[]
  deployments Deployment[]
}

model RefreshToken {
  id           String    @id @default(uuid())
  token        String    @unique
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model BlacklistedToken {
  id           String    @id @default(uuid())
  token        String    @unique
  userId       String
  user         User?     @relation(fields: [userId], references: [id])
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model PasswordResetToken {
  id           String    @id @default(uuid())
  token        String    @unique
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
}

model Plan {
  id            String   @id @default(uuid())
  name          String
  cpu           Int
  ram           Int
  maxApps Int
  maxDatabases Int
  storageApp    Int
  storageDB     Int
  priceMonthly  Float
  priceQuarterly Float
  trialDays     Int
  users         User[]
  containerInstances ContainerInstance[]
  databases     Database[]
}

model ContainerInstance {
  id          String   @id @default(uuid())
  name        String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  status      String   @default("pending") // pending, running, stopped, error
  image       String
  type String
  metrics   ContainerMetrics[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Database {
  id        String  @id @default(cuid())
  userId    String
  planId    String
  dbType    String  // 'mysql', 'postgresql' ou 'mongodb'
  host      String
  port      Int
  username  String?
  password  String?
  dbName    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Deployment {
  id          String  @id @default(uuid()) 
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceName String  @unique
  imageName   String
  repoUrl     String
  stack       String
  envVars     Json
  status      String  @default("running")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContainerMetrics {
  id         String   @id @default(uuid())
  containerId String   @unique
  cpuUsage   Float
  memoryUsage Float
  diskUsage  Float
  createdAt  DateTime @default(now())

  container  ContainerInstance @relation(fields: [containerId], references: [id])
}



